

// paste together selected samples from all projects
def getSelectedSamples(params) {
    selectedSamples = ''
    for (i = 1; i <= 15; i++) {
        if (params["P" + "$i" + " Samples"] != '') {
            if (selectedSamples != '') {
                selectedSamples += ','
            }
            selectedSamples += params["P" + "$i" + " Samples"]
        }
    }
    return selectedSamples
}


// send notifications about the build start or end
def notifyBuild(String buildStatus, String selectedSamples) {
    
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    
    // Default values
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] started'"
    def summary = "Samples: ${selectedSamples}\nConsole: (${env.BUILD_URL}console)"
    
    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00' // yellow
    } else if (buildStatus == 'SUCCESSFUL') {
        subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] completed'"
        summary = "Samples: ${selectedSamples}\nConsole: (${env.BUILD_URL}console)\nBuild status: ${buildStatus}\nOutput Directory: '/work/jenkins/data/${env.BUILD_ID}"
        colorCode = '#00FF00' // green
    } else {
        subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] completed with errors'"
        summary = "Samples ${selectedSamples}\nConsole: (${env.BUILD_URL}console)\nBuild status: ${buildStatus}"
        colorCode = '#FF0000' // red
    }
    
    // send email notification
    //emailext (body: summary, subject: subject, to: 'boazfr@gmail.com')

    // send slack notifications
    slackSend (color: colorCode, message: subject + '\n' + summary)
}


// global parameters
def selectedSamplesStr = getSelectedSamples(params)
def build_dir = "/work/jenkins/vdjbase_runs/$BUILD_ID/"



pipeline {
    // let jenkins balance the jobs between the nodes
    agent any
    stages {
        // send notification that the build has started
        stage('Notify build started') {
            steps {
                // notify build started
                notifyBuild ('STARTED', selectedSamplesStr)
            }
        }
        // create an output directory for the job
        stage('Create output directory') {
            steps {
                script {
                    sh "mkdir -p ${build_dir}"
                    sh "chmod -R ugo+rw ${build_dir}"
                }
            }        
        }
        // create a job per sample
        stage('Run vdjbase pipeline') {
            agent {
                // use the vdjbase pipeline docker container
                docker {
                    image 'peresay/vdjbase_pipeline'
                    args "-v ${build_dir}:/data:z -v /work/peresay/vdjbase/fasta_files/:/fasta_files:z"
                }
            }            
            steps {
                script {
                    def pipeline_jobs = [:]
                    //def selectedSamples = getSelectedSamples(params)
                    //selectedSamples = selectedSamples.split(',')
                    selectedSamples = selectedSamplesStr.split(',')
                    for (i = 0; i < selectedSamples.length; i++) {
                        def sample = selectedSamples[i]
                        def output_dir = "/work/jenkins/vdjbase_runs/$BUILD_ID/"
                        pipeline_jobs["$sample"] = {
                            node {
                                stage("$sample") {
                                    if (sample.startsWith('P6_') || sample.startsWith('P5_') || sample.startsWith('P2_') || sample.startsWith('P13_') || sample.startsWith('P15_')) {
                                        sh "vdjbase-pipeline -f /fasta_files/${sample}.fasta -s ${sample} -t 20 -o /data/ --short_reads"
                                    } else {
                                        sh "vdjbase-pipeline -f /fasta_files/${sample}.fasta -s ${sample} -t 20 -o /data/"
                                    }
                                }
                            }
                        }
                    }
                    parallel pipeline_jobs
                }
            }
        }
    }
    post {
        always {
            notifyBuild (currentBuild.result, getSelectedSamples(params))
        }
        //failure {
            //sh 'rm -rf /work/jenkins/vdjbase_runs/$BUILD_ID/'
        //}
    }
}




pipeline {
    // let jenkins balance the jobs between the nodes
    agent any
    environment {
        LD_LIBRARY_PATH='/private/anaconda3/lib'
        IGDATA='/home/bcrlab/eitan/data/igblast/'
    }
    stages {
        // send notification that the build has started
        stage('Notify build started') {
            steps {
                // notify build started
                notifyBuild ('STARTED', getSelectedSamples(params))
            }
        }
        // create an output directory for the job
        stage('Create output directory') {
            steps {
                sh "mkdir -p /work/jenkins/vdjbase_runs/$BUILD_ID"
                sh "chmod -R ugo+rw /work/jenkins/vdjbase_runs/$BUILD_ID"
            }        
        }
        // create a job per sample
        stage('Run vdjbase pipeline') {
            steps {
                script {
                    def pipeline_jobs = [:]
                    def selectedSamples = getSelectedSamples(params)
                    selectedSamples = selectedSamples.split(',')
                    for (i = 0; i < selectedSamples.length; i++) {
                        def sample = selectedSamples[i]
                        def output_dir = "/work/jenkins/vdjbase_runs/$BUILD_ID/"
                        pipeline_jobs["$sample"] = {
                            node {
                                stage("$sample") {
                                    sh "mkdir -p " + output_dir
                                    sh "chmod -R ugo+rw " + output_dir
                                    runPipeline ("$sample", output_dir)
                                }
                            }
                        }
                    }
                    parallel pipeline_jobs
                }
            }
        }
    }
    post {
        always {
            notifyBuild (currentBuild.result, getSelectedSamples(params))
        }
        failure {
            //sh 'rm -rf /work/jenkins/vdjbase_runs/$BUILD_ID/'
        }
    }
}


def getSelectedSamples(params) {
    selectedSamples = ''
    for (i = 1; i <= 15; i++) {
        if (params["P" + "$i" + " Samples"] != '') {
            if (selectedSamples != '') {
                selectedSamples += ','
            }
            selectedSamples += params["P" + "$i" + " Samples"]
        }
    }
    return selectedSamples
}


def runPipeline(String sampleName, String outputDir, String numThreads="20") {
    
    def inputFile = '/work/peresay/vdjbase/fasta_files/' + sampleName + '.fasta'
    def command = 'time nice -19 Rscript /localdata/peresay/scripts/vdjbase_pipeline.R'
    // input file
    command += ' -f ' + inputFile
    // output path
    command += ' -o ' + outputDir
    // number of threads
    command += ' -t ' + numThreads
    // sample name
    command += ' -s ' + sampleName
    // short reads sample
    if (sampleName.startsWith('P6_') || sampleName.startsWith('P5_') || sampleName.startsWith('P2_') || sampleName.startsWith('P13_') || sampleName.startsWith('P15_')) {
        command += ' --short_reads'
    }
    sh command
}


def notifyBuild(String buildStatus, String selectedSamples) {
    
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    
    // Default values
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] started'"
    def summary = "Samples: ${selectedSamples}\nConsole: (${env.BUILD_URL}console)"
    
    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00' // yellow
    } else if (buildStatus == 'SUCCESSFUL') {
        subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] completed'"
        summary = "Samples: ${selectedSamples}\nConsole: (${env.BUILD_URL}console)\nBuild status: ${buildStatus}\nOutput Directory: '/work/jenkins/data/${env.BUILD_ID}"
        colorCode = '#00FF00' // green
    } else {
        subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] completed with errors'"
        summary = "Samples ${selectedSamples}\nConsole: (${env.BUILD_URL}console)\nBuild status: ${buildStatus}"
        colorCode = '#FF0000' // red
    }
    
    // send email notification
    //emailext (body: summary, subject: subject, to: 'boazfr@gmail.com')

    // send slack notifications
    slackSend (color: colorCode, message: subject + '\n' + summary)
}
